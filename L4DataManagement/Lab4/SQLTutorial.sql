/*
DATE CREATED: 27/02/2025
USER: RILEY
DESCRIPTION: SQL TUTORIAL
*/

/* MAIN LINKED */
-- CREATE A TRACK TABLE
CREATE TABLE TRACK(
    TRACKID INT PRIMARY KEY,
    TITLE VARCHAR(50) ,
    DURATION INT
);

/* LINK 1: MUSICIAN-SONG LINK */
-- CREATE A MUSICIAN TABLE
CREATE TABLE MUSICIAN(
    MUSICIANID INT PRIMARY KEY,
    NAME VARCHAR(50),
    MUSICIANTYPE VARCHAR(50),
    MUSICIAN_DOB DATE
);

CREATE TABLE SONG(
    SONGID INT PRIMARY KEY,
    TITLE VARCHAR(50) 
);

CREATE TABLE MUSICIAN_SONG(
    MUSICIANID INT,
    SONGID INT,
    PRIMARY KEY(MUSICIANID, SONGID),
    FOREIGN KEY(MUSICIANID) REFERENCES MUSICIAN(MUSICIANID) ON DELETE SET NULL,
    FOREIGN KEY(SONGID) REFERENCES SONG(SONGID)
);

CREATE TABLE SONG_TRACK(
    SONGID INT,
    TRACKID INT,
    PRIMARY KEY(SONGID, TRACKID),
    FOREIGN KEY(SONGID) REFERENCES SONG(SONGID),
    FOREIGN KEY(TRACKID) REFERENCES TRACK(TRACKID)
);

/* LINK 2: MUSICIAN_ARTIST LINK */
CREATE TABLE ARTIST(
    ARTISTID INT PRIMARY KEY,
    NAME VARCHAR(50),
    ARTISTTYPE VARCHAR(50)
);

CREATE TABLE MUSICIAN_ARTIST(
    MUSICIANID INT,
    ARTISTID INT,
    PRIMARY KEY(MUSICIANID, ARTISTID),
    FOREIGN KEY(MUSICIANID) REFERENCES MUSICIAN(MUSICIANID) ON DELETE SET NULL,
    FOREIGN KEY(ARTISTID) REFERENCES ARTIST(ARTISTID)
);

CREATE TABLE ARTIST_SONG(
    ARTISTID INT,
    SONGID INT,
    PRIMARY KEY(ARTISTID, SONGID),
    FOREIGN KEY(ARTISTID) REFERENCES ARTIST(ARTISTID),
    FOREIGN KEY(SONGID) REFERENCES SONG(SONGID)
);

/* LINK 3: CD_TRACK LINK */
CREATE TABLE CD(
    CDID INT PRIMARY KEY,
    TITLE VARCHAR(50),
    RELEASEDATE DATE
);

CREATE TABLE CD_TRACK(
    CDID INT,
    TRACKID INT,
    PRIMARY KEY(CDID, TRACKID),
    FOREIGN KEY(CDID) REFERENCES CD(CDID),
    FOREIGN KEY(TRACKID) REFERENCES TRACK(TRACKID)
);

/* LINK 4: GENRE_TRACK LINK */
CREATE TABLE GENRE(
    GENREID INT PRIMARY KEY,
    NAME VARCHAR(50)
);

CREATE TABLE GENRE_TRACK(
    GENREID INT,
    TRACKID INT,
    PRIMARY KEY(GENREID, TRACKID),
    FOREIGN KEY(GENREID) REFERENCES GENRE(GENREID),
    FOREIGN KEY(TRACKID) REFERENCES TRACK(TRACKID)
);

/* LINK 5: MUSICIAN_TRACK */
CREATE TABLE MUSICIAN_TRACK(
    MUSICIANID INT,
    TRACKID INT,
    PRIMARY KEY(MUSICIANID, TRACKID),
    FOREIGN KEY(MUSICIANID) REFERENCES MUSICIAN(MUSICIANID) ON DELETE SET NULL,
    FOREIGN KEY(TRACKID) REFERENCES TRACK(TRACKID) ON DELETE SET NULL
);

/* INSERT DATA TO MAIN TABLE */
INSERT ALL
    -- TRACK
    INTO TRACK(TRACKID, TITLE, DURATION) VALUES(1, 'TRACK 1', 180)
    INTO TRACK(TRACKID, TITLE, DURATION) VALUES(2, 'TRACK 2', 200)
    -- MUSICIAN
    INTO MUSICIAN(MUSICIANID, NAME, MUSICIANTYPE, MUSICIAN_DOB) VALUES(1, 'MUSICIAN 1', 'SINGER', TO_DATE('1990-01-01', 'YYYY-MM-DD'))
    INTO MUSICIAN(MUSICIANID, NAME, MUSICIANTYPE, MUSICIAN_DOB) VALUES(2, 'MUSICIAN 2', 'GUITARIST', TO_DATE('1991-01-01', 'YYYY-MM-DD'))
    -- SONG
    INTO SONG(SONGID, TITLE) VALUES(1, 'SONG 1')
    INTO SONG(SONGID, TITLE) VALUES(2, 'SONG 2')
    INTO SONG(SONGID, TITLE) VALUES(3, 'SONG 3')
    -- ARTIST
    INTO ARTIST(ARTISTID, NAME, ARTISTTYPE) VALUES(1, 'ARTIST 1', 'SINGER')
    INTO ARTIST(ARTISTID, NAME, ARTISTTYPE) VALUES(2, 'ARTIST 2', 'GUITARIST')
    INTO ARTIST(ARTISTID, NAME, ARTISTTYPE) VALUES(3, 'ARTIST 1', 'DRUMMER')
    -- CD
    INTO CD(CDID, TITLE, RELEASEDATE) 
        VALUES(1, 'CD 1', TO_DATE('2025-01-01', 'YYYY-MM-DD'))
    INTO CD(CDID, TITLE, RELEASEDATE) 
        VALUES(2, 'CD 2', TO_DATE('2025-02-01', 'YYYY-MM-DD'))
    -- GENRE
    INTO GENRE(GENREID, NAME) VALUES(1, 'POP')
    INTO GENRE(GENREID, NAME) VALUES(2, 'ROCK')
SELECT * FROM DUAL;

/* INSERT DATA TO LINK TABLES */
INSERT ALL
    INTO MUSICIAN_TRACK(MUSICIANID, TRACKID) VALUES(1, 1)
    INTO MUSICIAN_TRACK(MUSICIANID, TRACKID) VALUES(2, 2)
    INTO GENRE_TRACK(GENREID, TRACKID) VALUES(1, 1)
    INTO SONG_TRACK(SONGID, TRACKID) VALUES(1, 1)
    INTO ARTIST_SONG(ARTISTID, SONGID) VALUES(1, 1)  
    INTO ARTIST_SONG(ARTISTID, SONGID) VALUES(2, 2)
    INTO MUSICIAN_SONG(MUSICIANID, SONGID) VALUES(1, 1)
    INTO MUSICIAN_SONG(MUSICIANID, SONGID) VALUES(2, 2)
    INTO CD_TRACK(CDID, TRACKID) VALUES(1, 1)
    INTO CD_TRACK(CDID, TRACKID) VALUES(2, 2)
    INTO MUSICIAN_ARTIST(MUSICIANID, ARTISTID) VALUES(1, 1)
    INTO MUSICIAN_ARTIST(MUSICIANID, ARTISTID) VALUES(2, 2)
SELECT * FROM DUAL;

/* QUERY DATA */
SELECT * FROM TRACK;
SELECT * FROM MUSICIAN;
SELECT * FROM SONG;
SELECT * FROM ARTIST;

/* QUERY DATA FROM LINK TABLES */
SELECT A.NAME AS ARTIST_NAME, A.ARTISTTYPE, S.TITLE AS SONG_TITLE
FROM ARTIST A
    JOIN ARTIST_SONG AS_LINK ON A.ARTISTID = AS_LINK.ARTISTID
    JOIN SONG S ON AS_LINK.SONGID = S.SONGID;

/* QUERY DATA FROM LINK TABLES WITH SPECIFIC DATA */
SELECT A.NAME AS ARTIST_NAME, S.TITLE AS SONG_TITLE
FROM ARTIST A
    JOIN ARTIST_SONG AS_LINK ON A.ARTISTID = AS_LINK.ARTISTID
    JOIN SONG S ON AS_LINK.SONGID = S.SONGID
    WHERE A.NAME = 'ARTIST 1'; 

/* EXPERIMENTAL : GOOGLE CODE FOR ALL RELATIONSHIPS */
SELECT A.NAME AS ARTIST_NAME, M.NAME AS MUSICIAN_NAME, S.TITLE AS SONG_TITLE, T.TITLE AS TRACK_TITLE, G.NAME AS GENRE_NAME
FROM ARTIST A
    JOIN ARTIST_SONG AS_LINK ON A.ARTISTID = AS_LINK.ARTISTID
    JOIN SONG S ON AS_LINK.SONGID = S.SONGID
    JOIN SONG_TRACK ST ON S.SONGID = ST.SONGID
    JOIN TRACK T ON ST.TRACKID = T.TRACKID
    JOIN GENRE_TRACK GT ON T.TRACKID = GT.TRACKID
    JOIN GENRE G ON GT.GENREID = G.GENREID
    JOIN MUSICIAN_TRACK MT ON T.TRACKID = MT.TRACKID
    JOIN MUSICIAN M ON MT.MUSICIANID = M.MUSICIANID;

/* CLEAN UP */
DROP TABLE MUSICIAN_TRACK CASCADE CONSTRAINTS;
DROP TABLE GENRE_TRACK CASCADE CONSTRAINTS;
DROP TABLE CD_TRACK CASCADE CONSTRAINTS;
DROP TABLE ARTIST_SONG CASCADE CONSTRAINTS;
DROP TABLE MUSICIAN_ARTIST CASCADE CONSTRAINTS;
DROP TABLE SONG_TRACK CASCADE CONSTRAINTS;
DROP TABLE MUSICIAN_SONG CASCADE CONSTRAINTS;
DROP TABLE GENRE CASCADE CONSTRAINTS;
DROP TABLE CD CASCADE CONSTRAINTS;
DROP TABLE ARTIST CASCADE CONSTRAINTS;
DROP TABLE SONG CASCADE CONSTRAINTS;
DROP TABLE MUSICIAN CASCADE CONSTRAINTS;
DROP TABLE TRACK CASCADE CONSTRAINTS;
DROP TABLE MUSICIAN_SONG_LNK CASCADE CONSTRAINTS;

COMMIT;
